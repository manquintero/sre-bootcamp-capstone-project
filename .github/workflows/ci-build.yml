name: CI
'on':
  push:
    branches:
      - devel
  pull_request:
    branches:
      - main
env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  IMAGE: academy-sre-bootcamp-manuel-quintero
  IMAGE_TAG: "latest"
  ECS_TASK_DEFINITION: ".aws/task-definition.json"
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: >
          python -m pip install --upgrade pip

          pip install pylint

          [[ -f "./python/requirements.txt" ]] && pip install -r
          "./python/requirements.txt"
      - name: Analysing the code with pylint
        run: |
          pylint python/
  tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov mock
          [[ -f "./python/requirements.txt" ]] && pip install -r "./python/requirements.txt"
      - name: Test with pytest
        run: |
          pytest python
      - name: Build Coverage
        run: |
          pytest --cov-config=python/.coveragerc --cov python > pytest-coverage.txt
      - name: Comment coverage
        uses: coroo/pytest-coverage-commentator@v1.0.2
  DockerHub:
    needs: tests
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        if: ${{ github.event_name == 'pull_request' }}
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./python
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE }}:${{ ENV.IMAGE_TAG }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  ContainerRegistry:
    needs: tests
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}
      - run: |-
          gcloud --quiet auth configure-docker
      - name: Build
        run: |-
          docker build \
            --tag "gcr.io/${PROJECT_ID}/${{ env.IMAGE }}:${{ ENV.IMAGE_TAG }}" \
            --build-arg COMMIT_SHA="$GITHUB_SHA" \
            ./python
      - name: Publish
        if: ${{ github.event_name == 'pull_request' }}
        run: |-
          docker push "gcr.io/${PROJECT_ID}/${{ env.IMAGE }}:${{ ENV.IMAGE_TAG }}"
  ECR:
    needs: tests
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and tag, image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build a docker container
          docker build \
            -t ${ECR_REGISTRY}/${{ env.IMAGE }}:${{ ENV.IMAGE_TAG }} \
            --build-arg COMMIT_SHA="$GITHUB_SHA" \
            ./python
          echo "::set-output name=image::${ECR_REGISTRY}/${{ env.IMAGE }}:${{ ENV.IMAGE_TAG }}"
      - name: Publish to Amazon ECR
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          # Push docker image to ECR so that it can be deployed to ECS.
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE }}:${{ ENV.IMAGE_TAG }}

  Terraform:
    needs: ContainerRegistry
    runs-on: ubuntu-latest
    environment: production

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2
